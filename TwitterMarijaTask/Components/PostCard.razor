@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using TwitterMarijaTask.Data
@using System.Globalization
@using Microsoft.AspNetCore.Components
@using TwitterMarijaTask.Services
@inject IDeletePostService DeletePostService
@inject IGetPostService GetPostService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


<div class="card mb-2 custom-card" style="max-width: 600px; margin: auto;">
    <div class="card-body d-flex custom-card-body">
        <img src="@Post.User?.ImageUrl" class="rounded-circle me-3 profile-img" alt="Profile" style="width: 48px; height: 52px;" />
        <div class="text-content">
            <h6 class="mb-0">
                @Post.User?.Name
                <small class="text-muted">@("@" + Post.User?.Username) · @FormatDate(Post.CreatedAt)</small>
            </h6>
            <p class="mb-2">@Post.Description</p>

            @if (!string.IsNullOrWhiteSpace(Post.ImageUrl))
            {
                <img src="@Post.ImageUrl" class="img-fluid rounded post-img" alt="Post Image" style="max-height: 360px; margin-bottom:10px" />
            }
            <div class="d-flex justify-content-between align-items-center mt-2 action-buttons">
            @if (Post.User?.Id==1)
            {
                <button class="btn btn-sm delete-btn" @onclick="() => ConfirmDelete(Post.Id, 1)" data-bs-toggle="tooltip" title="Delete">
                    <i class="bi bi-trash3 text-danger"></i>
                        
                </button>

                }
    else{
     <div class="mx-auto d-flex  gap-4 align-items-center action-container" style="position:absolute; left:250px ; margin-top:10px ; margin-bottom:10px;">
                <div class="d-flex align-items-center action-item" role="button" @onclick="ToggleLike" data-bs-toggle="tooltip"  data- title="Like">
                    <i class="@LikeIcon" style="color:@(IsLiked ? "deeppink" : "inherit")"></i>
                    @if (IsLiked)
                    {
                        <span class="ms-1 text-pink-500">1</span>
                    }
                </div>

                <div class="d-flex align-items-center action-item" role="button" @onclick="ToggleRepost" data-bs-toggle="tooltip" title="Repost">
                    <i class="@RepostIcon" style="color:@(IsReposted ? "green" : "inherit")"></i>
                    @if (IsReposted)
                    {
                        <span class="ms-1 text-success">1</span>
                    }
                </div>
                <div class="d-flex align-items-center action-item" role="button" @onclick="ToggleBookmark" data-bs-toggle="tooltip" title="Bookmark">
                    <i class="@BookmarkIcon" style="color:@(IsBookmarked ? "#22d0f2" : "inherit")"></i>

                </div>
            </div>
            }
                
                <div style="width: 32px;"></div>
                </div>
        </div>
    </div>
</div>
@if (DeleteSuccessMessage != null)
{
    <div class="alert alert-danger mt-2 text-center custom-alert" style="width:600px; margin-left: 250px">@DeleteSuccessMessage</div>
}

@code {
    [Parameter]
    public Post Post { get; set; } = default!;
    private bool IsLiked = false;
    private bool IsReposted = false;
    private bool IsBookmarked = false;
    private string LikeIcon => IsLiked ?  "bi bi-heart-fill" : "bi bi-heart";
    private string RepostIcon => IsReposted ?  "bi bi-repeat" : "bi bi-repeat";
    private string BookmarkIcon => IsBookmarked ?  "bi bi-bookmark-fill" : "bi bi-bookmark";
    private string? DeleteSuccessMessage;

    private string FormatDate(DateTime createdAt)
    {
        var now = DateTime.Now;
        var difference = now - createdAt;

        if (difference.TotalMinutes < 1)
            return "just now";
        if (difference.TotalMinutes < 60)
            return $"{Math.Floor(difference.TotalMinutes)} min";
        if (difference.TotalHours < 24)
            return $"{Math.Floor(difference.TotalHours)} h";

        var formatted = createdAt.ToString("MMM d", CultureInfo.InvariantCulture);
        return char.ToUpper(formatted[0]) + formatted.Substring(1);
    }
    private async Task DeletePost(int Id, int UserId)
    {
        await DeletePostService.DeletePostAsync(Id, UserId);
        await GetPostService.GetAllPostsAsync();
        DeleteSuccessMessage = "Post deleted successfully.";
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true);

    }
    private async Task ConfirmDelete(int Id, int UserId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this post?");
        if (!confirmed)
        {
            return;
        }
        else
        {
            await DeletePost(Id, UserId);

        }

    }
    private void ToggleLike()
    {
        IsLiked = !IsLiked;
    }
    private void ToggleRepost()
    {
        IsReposted = !IsReposted;
    }
    private void ToggleBookmark()
    {
        IsBookmarked = !IsBookmarked;

    }
}
