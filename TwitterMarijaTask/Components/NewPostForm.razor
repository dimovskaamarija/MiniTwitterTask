@using TwitterMarijaTask.Data
@using TwitterMarijaTask.Services
@inject ICreatePostService CreatePostService
@inject NavigationManager Navigation
@inject IGetUserService GetUserService

<div class="card create-post-card" style="max-width: 600px; margin: auto;">
    <div class="card-body d-flex">
        <img src="@user?.ImageUrl" alt="User profile" class="rounded-circle me-3 create-post-img" style="width: 48px; height: 48px; object-fit: cover;" />

        <EditForm Model="@postModel" OnValidSubmit="HandleValidSubmit" class="flex-grow-1 create-post-form">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputTextArea @bind-Value="postModel.Description"
                           class="form-control border-0 create-post-textarea"
                           placeholder="What's happening?"
                           style="resize: none; font-size: 18px;" />
            <label for="imageUpload" class="btn  d-inline-flex align-items-center create-image-label">
                <i class="bi bi-image me-1" data-bs-toggle="tooltip" title="Upload an image" style="color: black"></i>
            </label>

            <InputFile id="imageUpload"
                       class="d-none create-image-input"
                       OnChange="HandleImageUpload" />



            <div class="d-flex justify-content-end mt-2 submit-container">
                <button type="submit" class="btn btn-secondary rounded-pill px-4 submit-btn" style="font-weight: bold;">Post</button>
            </div>
        </EditForm>
    </div>
</div>

@if (successMessage != null)
{
    <div class="alert alert-success mt-2 text-center" style="width:600px; margin-left: 250px" >@successMessage</div>
}

@code {
    private Post postModel = new() { UserId = 1 };
    private string? successMessage;
    private User? user;

    protected override async Task OnInitializedAsync()
    {
        user = await GetUserService.GetUserByIdAsync(1);
    }

    private async Task HandleValidSubmit()
    {
        var createdPost = await CreatePostService.CreateANewPostAsync(postModel.Description!, postModel.ImageUrl, postModel.UserId);
        successMessage = "Post created successfully!";
        postModel = new Post { UserId = 1 };
        Navigation.NavigateTo("/", forceLoad: true);
    }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var uploadsFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "Images", "posts");

        if (!Directory.Exists(uploadsFolder))
        {
            Directory.CreateDirectory(uploadsFolder);
        }

        var uniqueFileName = $"{Guid.NewGuid()}_{Path.GetFileName(file.Name)}";
        var filePath = Path.Combine(uploadsFolder, uniqueFileName);

        await using var stream = new FileStream(filePath, FileMode.Create);
        await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream);
        postModel.ImageUrl = $"Images/posts/{uniqueFileName}";
        successMessage = "Image uploaded successfully.";
    }

}
